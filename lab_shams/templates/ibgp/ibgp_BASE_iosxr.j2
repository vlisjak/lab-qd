{% set nodes = master.devices %}
router bgp {{ nodes[node].ibgp.asn }}
  bgp router-id {{ nodes[node].interfaces.Loopback0.ipv4_address.split('/') | first }}
  nsr
  bgp graceful-restart restart-time 120
  bgp graceful-restart graceful-reset
  bgp graceful-restart stalepath-time 360
  bgp graceful-restart
  bgp log neighbor changes detail
  ibgp policy out enforce-modifications
  !
  address-family ipv4 unicast
    additional-paths receive
    additional-paths send
    maximum-paths ibgp 2
    advertise best-external
  !
  address-family vpnv4 unicast
  !
  {# TBD: process "full_mesh: [pe]" #}
  {# Am I a RR client? #}
  {% if nodes[node].ibgp.client_of is defined %}
  {% set rr_group = nodes[node].ibgp.client_of %}
  neighbor-group {{ rr_group }}
   remote-as {{ nodes[node].ibgp.asn }}
   description My RRs
   update-source Loopback0
   address-family ipv4 unicast
   !
   address-family vpnv4 unicast
   !
  {% set rr_list = [] %}
  {% for rr in nodes if rr_group in nodes[rr].device_roles %}
  {% set rr_list = rr_list.append(rr) %}
  {% endfor %}
  {% for rr in rr_list %}
  neighbor {{ nodes[rr].interfaces.Loopback0.ipv4_address.split('/') | first }}
   use neighbor-group {{ rr_group }}
   description iBGP session to {{ rr }}
  {% endfor %}
  {% endif %}
!
  {# Am I a RR for any other nodes? #}
  {# Logic: find any other node with "ibgp.client_of" that points to my "device_role" #}
  {% set client_list = [] %}
  {% set ns = namespace(client_group=None) %}
  {% for client, client_details in nodes.items() %}
  {% if 'ibgp' in client_details and client_details.ibgp.client_of in nodes[node].device_roles %}
    {% set client_list = client_list.append(client) %}
    {% set ns.client_group = client_details.ibgp.client_of %}
  {% endif %}
  {% endfor %}

  {% if client_list|length > 0 %}
  neighbor-group {{ ns.client_group }}
   remote-as {{ nodes[node].ibgp.asn }}
   description My RR Clients
   update-source Loopback0
   address-family ipv4 unicast
    route-reflector-client
   !
   address-family vpnv4 unicast
    route-reflector-client
   !
  {% for client in client_list %}
  neighbor {{ nodes[client].interfaces.Loopback0.ipv4_address.split('/') | first }}
   use neighbor-group {{ ns.client_group }}
   description iBGP session to {{ client }}
  {% endfor %}
  {% endif %}
