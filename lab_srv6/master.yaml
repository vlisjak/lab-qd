clab_name: srv6
drawio_diagram: topology.drawio

# Continerlab parameters
clab_startup:
  iosxr:
    image: ios-xr/xrd-control-plane:24.2.11
    kind: cisco_xrd
    startup-config: xrd_initial_cfg.j2
# Nornir parameters
nornir_startup:
  # note: xrd and xrv9k are equivalent configuration wise -> the same iosxr nornir platform 
  iosxr:
    platform: iosxr
    group: iosxr
    timeout: 60
  inventory:
    plugin: SimpleInventory
    options:
      host_file: 'nornir/nornir_hosts.yaml'
      group_file: 'nornir/nornir_groups.yaml'
  runner:
    plugin: threaded
    options:
      num_workers: 10
  logging:
    log_file: nornir/nornir.log

# Parameters specific to each vendor/device type
device_groups:
  iosxr:
    # use default clab credentials (clab/clab@123), because these are baked into xrv9k docker image!
    # - do not define/modify CLAB_MGMT_VRF for the same reason
    username: clab
    password: clab@123
    clab:
      inherit_from: clab_startup.iosxr
    # clab_startup.yaml expects different naming (Gi0-0-0-0) than iosxr (Gi0/0/0/0)
    # - add mapping logic for each clab kind (that requires mapping) in: scripts/utils.py -> clab_intf_map()
    clab_intf_map: True
    nornir:
      inherit_from: nornir_startup.iosxr
    # intf_naming is used for auto-allocation of interface IDs for specific interface type
    intf_naming:
      default:
        name: Gi0/0/0/
        first_id: 0
      core_bundle: 
        name: Bundle-Ether
        first_id: 1
      loopback0:
        name: Loopback
        first_id: 0
    interfaces:
      mgmt:
        name: MgmtEth0/RP0/CPU0/0

# Per network-role parameters
# - there could be multiple device types (device_group=iosxr, ios) for the same device role (device_role=pe) 
# - each device could belong to multiple roles (such as rr can also be pce, or p can also be a pe)
# - filename of j2 config templates is composed of device role: 
#   <section><device_role><nornir_platform>.j2   (eg: ibgp_pe_iosxr.j2)
device_roles:
  core:
    device_roles: [core]
  edge:
    device_roles: [edge]
    ibgp:
      asn: 100
      client_of: [rr]
  access:
    device_roles: [access]
    ibgp:
      asn: 100
      # TBD: we could compute inline RR for access devices from topology, being the edge nodes that terminate the access ring .. 
      #   -> for now we just hardcode `ibgp.client_of` in device list below
  rr:
    device_roles: [rr]
    isis:
      ol_bit: True
    ibgp:
      asn: 100
      full_mesh: [rr]
  pce:
    device_roles: [pce]
    isis:
      ol_bit: True
    ibgp:
      asn: 100
      client_of: [rr]
  cpev4:
    device_roles: [cpev4]
  cpev6:
    device_roles: [cpev6]

addr_plan:
  v4_core_common:
    v4_prefix: 1.0.0.0/16
    v4_loop0: 1.255.0.0/24
  core:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:00::/40
      algo1: FC00:BB01:00::/40
  edge1:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:04::/40
      algo1: FC00:BB01:04::/40
  edge2:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:08::/40
      algo1: FC00:BB01:08::/40
  access1:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:05::/40
      algo1: FC00:BB01:05::/40
  access2:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:0A::/40
      algo1: FC00:BB01:0A::/40
  rr_pce:
    inherit_from: addr_plan.v4_core_common
    v6_prefix: 
      algo0: FC00:BB00:00::/40
      algo1: FC00:BB01:00::/40

# List of all devices with inherited vendor-specific (device_groups) and role-specific (device_roles) inventory
devices:
  # --- RR
  rr1:
    inherit_from: 
      - device_roles.rr
      - device_groups.iosxr
  rr2:
    inherit_from: 
      - device_roles.rr
      - device_groups.iosxr
  # --- PCE
  pce1:
    inherit_from: 
      - device_roles.pce
      - device_groups.iosxr
  # --- CORE
  c1:
    inherit_from: 
      - device_roles.core
      - device_groups.iosxr
  c2:
    inherit_from: 
      - device_roles.core
      - device_groups.iosxr
  c3:
    inherit_from: 
      - device_roles.core
      - device_groups.iosxr
  c4:
    inherit_from: 
      - device_roles.core
      - device_groups.iosxr
  # --- EDGE region1
  e11:
    inherit_from: 
      - device_roles.edge
      - device_groups.iosxr
  e12:
    inherit_from: 
      - device_roles.edge
      - device_groups.iosxr
  # --- EDGE region2
  e21:
    inherit_from: 
      - device_roles.edge
      - device_groups.iosxr
  e22:
    inherit_from: 
      - device_roles.edge
      - device_groups.iosxr
  # --- ACCESS1 (in EDGE region1)
  a11:
    inherit_from: 
      - device_roles.access
      - device_groups.iosxr
    ibgp:
      client_of: [e11,e12]
  a12:
    inherit_from: 
      - device_roles.access
      - device_groups.iosxr
    ibgp:
      client_of: [e11,e12]
  a13:
    inherit_from: 
      - device_roles.access
      - device_groups.iosxr
    ibgp:
      client_of: [e11,e12]
  # --- ACCESS4 (in EDGE region2)
  a41:
    inherit_from: 
      - device_roles.access
      - device_groups.iosxr
    ibgp:
      client_of: [e21,e22]
      
  # --- v4 CPEs
  cpe1:
    inherit_from: 
      - device_roles.cpev4
      - device_groups.iosxr
  cpe2:
    inherit_from: 
      - device_roles.cpev4
      - device_groups.iosxr
  # --- v6 CPEs
  cpe3:
    inherit_from: 
      - device_roles.cpev6
      - device_groups.iosxr
  cpe4:
    inherit_from: 
      - device_roles.cpev6
      - device_groups.iosxr

# Link-group parameters
link_groups:
  core:
    link_group: core
    inherit_from: addr_plan.core.v4_prefix
    isis: 
      instance: core
      metric: 100
  edge1:
    link_group: edge1
    inherit_from: addr_plan.edge1.v4_prefix
    isis: 
      instance: edge1
      metric: 500
  edge2:
    link_group: edge2
    inherit_from: addr_plan.edge2.v4_prefix
    isis: 
      instance: edge2
      metric: 500
  access1:
    link_group: access1
    inherit_from: addr_plan.access1.v4_prefix
    isis: 
      instance: access1
      metric: 5000
  access2:
    link_group: access2
    inherit_from: addr_plan.access2.v4_prefix
    isis: 
      instance: access2
      metric: 5000
  rr_pce:
    link_group: rr_pce
    inherit_from: addr_plan.rr_pce.v4_prefix
    isis: 
      instance: core
      metric: 9999
  loopback0:
    link_group: loopback0
    v4_prefix: 1.255.0.0/24
    isis: 
      instance: core
      metric: 10
  mgmt:
    # If you're starting multiple clabs, you must use different mgmt prefix for each clab instance
    link_group: mgmt
    v4_prefix: 10.255.6.0/24
  cpev4_l3vpn:
    link_group: cpev4_l3vpn
    v4_prefix: 1.1.0.0/16
    mtu: 1500
  # TBD
  cpev6_l3vpn:
    link_group: cpev6_l3vpn
    v6_prefix: FC00:BB02:::/32
    mtu: 1500

# Topology definition
# - Parallel links are allowed
# - Loopback0 and MgmtEth interfaces will be generated by lab_create.py
# - Ensure that all nodes are first defined in "devices:" object
links:
  # TODO: parallel links - need to fix overlap in generated drawio diagram

  # core links
  - link: c1---c2
    inherit_from: link_groups.core
  - link: c1---c3
    inherit_from: link_groups.core
  - link: c4---c2
    inherit_from: link_groups.core
  - link: c4---c3
    inherit_from: link_groups.core

  # edge1 links
  - link: c1---e11
    inherit_from: link_groups.edge1
  - link: c3---e12
    inherit_from: link_groups.edge1
  - link: e11---e12
    inherit_from: link_groups.edge1

  # edge2 links
  - link: c2---e21
    inherit_from: link_groups.edge2
  - link: c4---e22
    inherit_from: link_groups.edge2
  - link: e21---e22
    inherit_from: link_groups.edge2

  # access1 links
  - link: e11---a11
    inherit_from: link_groups.access1
  - link: a11---a12
    inherit_from: link_groups.access1
  - link: a12---a13
    inherit_from: link_groups.access1
  - link: a13---e12
    inherit_from: link_groups.access1

  # access2 links
  - link: e21---a41
    inherit_from: link_groups.access2
  - link: e22---a41
    inherit_from: link_groups.access2

  # rr-c links
  - link: rr1---c1
    inherit_from: link_groups.rr_pce
  - link: rr1---c2
    inherit_from: link_groups.rr_pce
  - link: rr2---c3
    inherit_from: link_groups.rr_pce
  - link: rr2---c4
    inherit_from: link_groups.rr_pce

  # pce-c links
  - link: pce1---c1
    inherit_from: link_groups.rr_pce
  - link: pce1---c2
    inherit_from: link_groups.rr_pce

  # cpev4 links
  - link: cpe1---a11
    inherit_from: link_groups.cpev4_l3vpn
  - link: cpe1---a12
    inherit_from: link_groups.cpev4_l3vpn
  - link: cpe2---a41
    inherit_from: link_groups.cpev4_l3vpn

  # cpev6 links
  - link: cpe3---a12
    inherit_from: link_groups.cpev6_l3vpn
  - link: cpe3---a13
    inherit_from: link_groups.cpev6_l3vpn
  - link: cpe4---a41
    inherit_from: link_groups.cpev6_l3vpn

# TBD: network services
services:
  l3vpn:
    # Notes:
    # - VRF routes: for demo purposes we'll advertise Loop0 IPs of CPEs
    # - CE-PE uplink (neighbor pe, ifname, ip): derived from "interfaces->lldp->neighbor" in master_complete.yaml:
          # devices:
          #   cpe1:
          #     interfaces:
          #       Gi0/0/0/0:
          #         link_group: l3vpn
          #         lldp:
          #           neighbor: pe1
          #           neighbor_intf: Gi0/0/0/2
          #           neighbor_ipv4: 1.1.0.2/30
    #   -> on CPE we have to configure all (single or multihomed cpe) uplinks to device_role=pe
    #      -> TODO: one could override this by defining intf/neighbor manually in yaml
    # - ASN: 64000 + {{ rd }}
    # - RT/RD: {{ ibgp_asn }}:{{ rd }}

    vrf_A:
      rd: 1001
      affinity_exclude: DWDM
      endpoints:
        # Note: 
        # - cpe1/2 is dual-homed and PE uplinks are determined from infrastructure topology
        # but: if "uplinks" is present, only "uplinks" are used to find the neighbor PEs
        cpe1:
          pe_routing: 
            protocol: ebgp
            asn: 65001
            primary_pe: pe1
        cpe2:
          pe_routing: 
            protocol: static
            primary_pe: pe3